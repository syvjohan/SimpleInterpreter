:sysMemAllocHeap 64;
:sysCreateStack 32;

:struct Pair {
	:alias first : offset(0);
	:alias second : offset(4);
};

:struct String {
	:alias len : offset(0); /*offset 0*/
	:alias cStr : offset(4); /*offset 4*/
	/*Pair_s :alias pPair : offset(8);*/ /*offset 8*/

}; /*No typedef needed underlying layer will automaticle create a typedef String_s*/

:alias p : #33 = String; /*size is 4 bytes. p contains the start 
position to the first member alias. A struct need to contains >= 1 alias*/

:alias pa : #45 = String;

&p.len = 10;
&p.cStr = "hejhej";
:print(p.cStr);
:prin(p.len);
:print(p); /*skriver ut len*/


/* Program store struct String_s, Pair_s start and end position. 

struct Index_s {
	char name[NAMESIZE]; // String/len
	char type[TYPESIZE]; //offset
	int startPos; //0
	int len; //4
};

struct Index_s {
	char name[NAMESIZE]; // String_s/cStr
	char type[TYPESIZE]; //offset
	int startPos; //4
	int len; // 4
};

struct Index_s {
	char name[NAMESIZE]; // String/pPair
	char type[TYPESIZE]; // offset
	int startPos; // 8
	int len; // 4
};

struct Index_s {
	char name[NAMESIZE]; // p
	char type[TYPESIZE]; // String
	int startPos; // 33
	int len; // 8
}; */